{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "SWMLObject.json",
  "type": "object",
  "properties": {
    "version": {
      "type": "string",
      "const": "1.0.0"
    },
    "sections": {
      "$ref": "#/$defs/Section"
    }
  },
  "required": [
    "sections"
  ],
  "$defs": {
    "Section": {
      "type": "object",
      "properties": {
        "main": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/SWMLMethod"
          }
        }
      },
      "required": [
        "main"
      ],
      "additionalProperties": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/SWMLMethod"
        }
      }
    },
    "SWMLMethod": {
      "anyOf": [
        {
          "$ref": "#/$defs/Answer"
        },
        {
          "$ref": "#/$defs/AI"
        },
        {
          "$ref": "#/$defs/Cond"
        },
        {
          "$ref": "#/$defs/Connect"
        },
        {
          "$ref": "#/$defs/Denoise"
        },
        {
          "$ref": "#/$defs/Execute"
        },
        {
          "$ref": "#/$defs/Goto"
        },
        {
          "$ref": "#/$defs/Label"
        },
        {
          "$ref": "#/$defs/LiveTranscribe"
        },
        {
          "$ref": "#/$defs/LiveTranslate"
        },
        {
          "$ref": "#/$defs/Hangup"
        },
        {
          "$ref": "#/$defs/JoinRoom"
        },
        {
          "$ref": "#/$defs/Play"
        },
        {
          "$ref": "#/$defs/Prompt"
        },
        {
          "$ref": "#/$defs/ReceiveFax"
        },
        {
          "$ref": "#/$defs/Record"
        },
        {
          "$ref": "#/$defs/RecordCall"
        },
        {
          "$ref": "#/$defs/Request"
        },
        {
          "$ref": "#/$defs/Return"
        },
        {
          "$ref": "#/$defs/SendDigits"
        },
        {
          "$ref": "#/$defs/SendFax"
        },
        {
          "$ref": "#/$defs/SendSMS"
        },
        {
          "$ref": "#/$defs/Set"
        },
        {
          "$ref": "#/$defs/Sleep"
        },
        {
          "$ref": "#/$defs/SIPRefer"
        },
        {
          "$ref": "#/$defs/StopDenoise"
        },
        {
          "$ref": "#/$defs/StopRecordCall"
        },
        {
          "$ref": "#/$defs/StopTap"
        },
        {
          "$ref": "#/$defs/Switch"
        },
        {
          "$ref": "#/$defs/Tap"
        },
        {
          "$ref": "#/$defs/Transfer"
        },
        {
          "$ref": "#/$defs/Unset"
        }
      ]
    },
    "Answer": {
      "type": "object",
      "properties": {
        "answer": {
          "type": "object",
          "properties": {
            "max_duration": {
              "type": "integer",
              "minimum": 7,
              "description": "Maximum time in seconds to wait for an answer. Cannot be less than `7` seconds. Defaults to 14400 seconds."
            },
            "codecs": {
              "type": "string",
              "description": "Comma-seperated string of codecs to offer.\n Valid codecs are: [`PCMU,PCMA,G722,G729,AMR-WB,OPUS,VP8,H264`]"
            }
          },
          "description": "Answers an incoming call.",
          "additionalProperties": false
        }
      },
      "required": [
        "answer"
      ],
      "additionalProperties": false
    },
    "AI": {
      "type": "object",
      "properties": {
        "ai": {
          "type": "object",
          "properties": {
            "global_meta_data": {
              "type": "object",
              "properties": {},
              "additionalProperties": {},
              "description": "A powerful and flexible environmental variable which can accept arbitrary data that is set initially in the SWML script\nor from the SWML `set_global_data` action. This data can be referenced `globally`.\nAll contained information can be accessed and expanded within the prompt - for example, by using a template string."
            },
            "hints": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "An array of hints (as strings) to provide context to the dialogue."
            },
            "languages": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/Languages"
              },
              "description": "An array of JSON objects defining supported languages in the conversation."
            },
            "params": {
              "$ref": "#/$defs/AIParams",
              "description": "A JSON object containing parameters as key-value pairs."
            },
            "post_prompt": {
              "$ref": "#/$defs/AIPrompt",
              "description": "The final set of instructions and configuration settings to send to the agent."
            },
            "post_prompt_url": {
              "type": "string",
              "format": "uri",
              "description": "The URL to which to send status callbacks and reports. Authentication can also be set in the url in the format of `username:password@url`."
            },
            "pronounce": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/Pronounce"
              },
              "description": "An array of JSON objects to clarify the AI's pronunciation of words or expressions."
            },
            "prompt": {
              "$ref": "#/$defs/AIPrompt",
              "description": "Establishes the initial set of instructions and settings to configure the agent."
            },
            "SWAIG": {
              "$ref": "#/$defs/SWAIG",
              "description": "An array of JSON objects to create user-defined functions/endpoints that can be executed during the dialogue."
            }
          },
          "required": [
            "prompt"
          ],
          "description": "Create a new AI agent.",
          "additionalProperties": false
        }
      },
      "required": [
        "ai"
      ],
      "additionalProperties": false
    },
    "Cond": {
      "type": "object",
      "properties": {
        "cond": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/CondParams"
          },
          "description": "Execute a sequence of instructions depending on the value of a JavaScript condition."
        }
      },
      "required": [
        "cond"
      ],
      "additionalProperties": false
    },
    "Connect": {
      "type": "object",
      "properties": {
        "connect": {
          "oneOf": [
            {
              "$ref": "#/$defs/ConnectDeviceSingle"
            },
            {
              "$ref": "#/$defs/ConnectDeviceSerial"
            },
            {
              "$ref": "#/$defs/ConnectDeviceParallel"
            },
            {
              "$ref": "#/$defs/ConnectDeviceSerialParallel"
            }
          ],
          "description": "Dial a SIP URI or phone number."
        }
      },
      "required": [
        "connect"
      ],
      "additionalProperties": false
    },
    "Denoise": {
      "type": "object",
      "properties": {
        "denoise": {
          "type": "object",
          "properties": {},
          "description": "Start noise reduction. You can stop it at any time using `stop_denoise`.",
          "additionalProperties": false
        }
      },
      "required": [
        "denoise"
      ],
      "additionalProperties": false
    },
    "Execute": {
      "type": "object",
      "properties": {
        "execute": {
          "type": "object",
          "properties": {
            "dest": {
              "type": "string",
              "description": "Specifies what to execute. The value can be one of: \n<section_name> - section in the current document to execute.\nhttps://<URL>\" - URL pointing to the document to execute. Sends HTTP POST."
            },
            "params": {
              "type": "object",
              "properties": {},
              "additionalProperties": {},
              "description": "Named parameters to send to section or URL"
            },
            "meta": {
              "type": "object",
              "properties": {},
              "additionalProperties": {},
              "description": "User-defined metadata, ignored by SignalWire"
            },
            "on_return": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/SWMLMethod"
              },
              "description": "The list of SWML instructions to be executed when the executed section or URL returns"
            },
            "result": {
              "anyOf": [
                {
                  "$ref": "#/$defs/ExecuteSwitch"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/CondParams"
                  },
                  "description": "Execute a sequence of instructions depending on the value of a JavaScript condition."
                }
              ],
              "description": "`switch` on `return_value` if result is an object (`{}`), or use as a cond if result is an array (`[]`)"
            }
          },
          "required": [
            "dest"
          ],
          "description": "Execute a section or URL as a subroutine and return back to current document.",
          "additionalProperties": false
        }
      },
      "required": [
        "execute"
      ],
      "additionalProperties": false
    },
    "Goto": {
      "type": "object",
      "properties": {
        "goto": {
          "type": "object",
          "properties": {
            "label": {
              "type": "string",
              "description": "The name of the label in the current section to jump to."
            },
            "when": {
              "type": "string",
              "description": "The condition that triggers the `goto` jump."
            },
            "max": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "description": "The maximum number of times to perform the jump. Must be a number between 1 and 100."
            },
            "meta": {
              "type": "object",
              "properties": {},
              "additionalProperties": {},
              "description": "User-defined metadata to be stored with the jump. This metadata is ignored by SignalWire and the\ndefault is not set."
            }
          },
          "required": [
            "label"
          ],
          "description": "Jump to a specified label in the current SWML document.",
          "additionalProperties": false
        }
      },
      "required": [
        "goto"
      ],
      "additionalProperties": false
    },
    "Label": {
      "type": "object",
      "properties": {
        "label": {
          "type": "string",
          "description": "The name of the label in the current section to jump to."
        }
      },
      "required": [
        "label"
      ],
      "additionalProperties": false
    },
    "LiveTranscribe": {
      "type": "object",
      "properties": {
        "live_transcribe": {
          "type": "object",
          "properties": {
            "action": {
              "$ref": "#/$defs/TranscribeAction",
              "description": "The action to perform during live transcription."
            }
          },
          "required": [
            "action"
          ],
          "description": "Starts live transcription of the call. The transcription will be sent to the specified URL.",
          "additionalProperties": false
        }
      },
      "required": [
        "live_transcribe"
      ],
      "additionalProperties": false
    },
    "LiveTranslate": {
      "type": "object",
      "properties": {
        "live_translate": {
          "type": "object",
          "properties": {
            "action": {
              "$ref": "#/$defs/TranslateAction",
              "description": "The action to perform during live translation."
            }
          },
          "required": [
            "action"
          ],
          "description": "Starts a live translation session of the call. The translation will be sent to the specified URL.",
          "additionalProperties": false
        }
      },
      "required": [
        "live_translate"
      ],
      "additionalProperties": false
    },
    "Hangup": {
      "type": "object",
      "properties": {
        "hangup": {
          "type": "object",
          "properties": {
            "reason": {
              "anyOf": [
                {
                  "type": "string",
                  "const": "hangup"
                },
                {
                  "type": "string",
                  "const": "busy"
                },
                {
                  "type": "string",
                  "const": "decline"
                }
              ],
              "description": "The reason for hanging up the call."
            }
          },
          "description": "Hangup the call.",
          "additionalProperties": false
        }
      },
      "required": [
        "hangup"
      ],
      "additionalProperties": false
    },
    "JoinRoom": {
      "type": "object",
      "properties": {
        "join_room": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name of the room to join."
            }
          },
          "required": [
            "name"
          ],
          "description": "Joins a RELAY room.",
          "additionalProperties": false
        }
      },
      "required": [
        "join_room"
      ],
      "additionalProperties": false
    },
    "Play": {
      "type": "object",
      "properties": {
        "play": {
          "oneOf": [
            {
              "$ref": "#/$defs/PlayWithURL"
            },
            {
              "$ref": "#/$defs/PlayWithURLS"
            }
          ],
          "description": "Play file(s), ringtones, speech or silence."
        }
      },
      "required": [
        "play"
      ],
      "additionalProperties": false
    },
    "Prompt": {
      "type": "object",
      "properties": {
        "prompt": {
          "type": "object",
          "properties": {
            "play": {
              "anyOf": [
                {
                  "$ref": "#/$defs/play_url"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/play_url"
                  }
                }
              ],
              "description": "URL or array of URLs to play.\nAllowed URLs are:\n    http:// or https:// - audio file to GET\n    ring:[duration:]<country code> - ring tone to play. For example: ring:us to play single ring or ring:20.0:us to play ring for 20 seconds.\n    say:<text to speak> - Sentence to say\n    silence: <duration> - seconds of silence to play"
            },
            "volume": {
              "type": "number",
              "minimum": -40,
              "maximum": 40,
              "description": "Volume level for the audio file.\nDefault is 0.\nValid range is -40 to 40."
            },
            "say_voice": {
              "type": "string",
              "description": "The voice to use for the text to speech.\nDefault is `Polly.Salli`."
            },
            "say_language": {
              "type": "string",
              "description": "The language to use for the text to speech.\nDefault is `en-US`."
            },
            "say_gender": {
              "type": "string",
              "description": "The gender to use for the text to speech.\nDefault is `female`."
            },
            "max_digits": {
              "type": "integer",
              "description": "Number of digits to collect.\nDefault is `1`."
            },
            "terminators": {
              "type": "string",
              "description": "Digits that terminate digit collection.\nDefault is not set."
            },
            "digit_timeout": {
              "type": "number",
              "description": "Time in seconds to wait for next digit.\nDefault is `5.0` seconds."
            },
            "initial_timeout": {
              "type": "number",
              "description": "Time in seconds to wait for start of input.\nDefault is `5.0` seconds."
            },
            "speech_timeout": {
              "type": "number",
              "description": "Max time in seconds to wait for speech result."
            },
            "speech_end_timeout": {
              "type": "number",
              "description": "Time in seconds to wait for end of speech utterance."
            },
            "speech_language": {
              "type": "string",
              "description": "Language to detect speech in."
            },
            "speech_hints": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Words or phrases to help the speech recognition."
            },
            "speech_engine": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "The engine that is selected for speech recognition. The engine must support the specified language.\n[Deepgram|Google| etc...] Default is not set (SignalWire picks the engine)."
            }
          },
          "required": [
            "play"
          ],
          "description": "Play a prompt and wait for digit or speech input.\nSpeech detection is not enabled unless at least one speech parameter is set.\nIf only speech parameters are set (and no digit parameters), digit detection is not enabled.\nTo enable both digit and speech detection, set at least one parameter for each.",
          "additionalProperties": false
        }
      },
      "required": [
        "prompt"
      ],
      "additionalProperties": false
    },
    "ReceiveFax": {
      "type": "object",
      "properties": {
        "receive_fax": {
          "type": "object",
          "properties": {},
          "description": "Receive a fax being delivered to this call.",
          "additionalProperties": false
        }
      },
      "required": [
        "receive_fax"
      ],
      "additionalProperties": false
    },
    "Record": {
      "type": "object",
      "properties": {
        "record": {
          "type": "object",
          "properties": {
            "stereo": {
              "type": "boolean",
              "description": "If true, record in stereo.\nDefault is false."
            },
            "format": {
              "anyOf": [
                {
                  "type": "string",
                  "const": "wav"
                },
                {
                  "type": "string",
                  "const": "mp3"
                }
              ],
              "description": "The format to record in. Can be `wav` or `mp3`.\nDefault is \"wav\"."
            },
            "direction": {
              "anyOf": [
                {
                  "type": "string",
                  "const": "speak"
                },
                {
                  "type": "string",
                  "const": "listen"
                }
              ],
              "description": "Direction of the audio to record: \"speak\" for what party says, \"listen\" for what party hears.\nDefault is `speak`."
            },
            "terminators": {
              "type": "string",
              "description": "String of digits that will stop the recording when pressed."
            },
            "beep": {
              "type": "boolean",
              "description": "Play a beep before recording.\nDefault is `false`."
            },
            "input_sensitivity": {
              "type": "number",
              "description": "Input sensitivity for the recording.\nDefault is `44.0`."
            },
            "initial_timeout": {
              "type": "number",
              "description": "Time in seconds to wait for the start of speech.\nDefault is `4.0` seconds."
            },
            "end_silence_timeout": {
              "type": "number",
              "description": "Time in seconds to wait in silence before ending the recording.\nDefault is `5.0` seconds."
            },
            "max_length": {
              "type": "number",
              "description": "Maximum length of the recording in seconds."
            },
            "status_url": {
              "type": "string",
              "description": "URL to send recording status events to."
            }
          },
          "description": "Record the call audio in the foreground. Use this, for example, to record voicemails.",
          "additionalProperties": false
        }
      },
      "required": [
        "record"
      ],
      "additionalProperties": false
    },
    "RecordCall": {
      "type": "object",
      "properties": {
        "record_call": {
          "type": "object",
          "properties": {
            "control_id": {
              "type": "string",
              "description": "Identifier for this recording, to use with `stop_call_record`."
            },
            "stereo": {
              "type": "boolean",
              "description": "If `true`, record in stereo.\nDefault is `false`."
            },
            "format": {
              "anyOf": [
                {
                  "type": "string",
                  "const": "wav"
                },
                {
                  "type": "string",
                  "const": "mp3"
                }
              ],
              "description": "The format to record in. It can be `wav` or `mp3`.\nDefault is `wav`."
            },
            "direction": {
              "anyOf": [
                {
                  "type": "string",
                  "const": "speak"
                },
                {
                  "type": "string",
                  "const": "listen"
                },
                {
                  "type": "string",
                  "const": "both"
                }
              ],
              "description": "Direction of the audio to record: \"speak\" for what party says, \"listen\" for what party hears, \"both\" for what the party hears and says.\nDefault is `both`."
            },
            "terminators": {
              "type": "string",
              "description": "String of digits that will stop the recording when pressed."
            },
            "beep": {
              "type": "boolean",
              "description": "Play a beep before recording.\nDefault is `false`."
            },
            "input_sensitivity": {
              "type": "number",
              "description": "Input sensitivity for the recording.\nDefault is `44.0`."
            },
            "initial_timeout": {
              "type": "number",
              "description": "Time in seconds to wait for the start of speech.\nDefault is `0.0` seconds."
            },
            "end_silence_timeout": {
              "type": "number",
              "description": "Time in seconds to wait in silence before ending the recording.\nDefault is `0.0` seconds."
            },
            "max_length": {
              "type": "number",
              "description": "Maximum length of the recording in seconds."
            }
          },
          "description": "Record call in the background.\nUnlike the `record` method, the `record_call` method will start the recording and continue executing the SWML script without allowing the recording to happen in the background.\nTo stop call recordings started with `record_call`, use the `stop_call_record` method.",
          "additionalProperties": false
        }
      },
      "required": [
        "record_call"
      ],
      "additionalProperties": false
    },
    "Request": {
      "type": "object",
      "properties": {
        "request": {
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "description": "The URL to which the request is to be sent."
            },
            "method": {
              "anyOf": [
                {
                  "type": "string",
                  "const": "GET"
                },
                {
                  "type": "string",
                  "const": "POST"
                },
                {
                  "type": "string",
                  "const": "PUT"
                },
                {
                  "type": "string",
                  "const": "DELETE"
                }
              ],
              "description": "The HTTP method to be used for the request. Can be `GET`, `POST`, `PUT`, or `DELETE`."
            },
            "headers": {
              "type": "object",
              "properties": {},
              "additionalProperties": {},
              "description": "An object representing the headers to be included in the request."
            },
            "body": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "object",
                  "properties": {},
                  "additionalProperties": {}
                }
              ],
              "description": "The body of the request. Can be a `string` or an `object`."
            },
            "timeout": {
              "type": "number",
              "description": "Maximum time in seconds to wait for a response.\nDefault is `5.0` seconds."
            },
            "connect_timeout": {
              "type": "number",
              "description": "Maximum time in seconds to wait for a connection.\nDefault is `5.0` seconds."
            },
            "result": {
              "anyOf": [
                {
                  "$ref": "#/$defs/Switch"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/Cond"
                  }
                }
              ],
              "description": "`switch` on `return_value` if result is an object (`{}`), or use as a cond if result is an array (`[]`)."
            },
            "save_variables": {
              "type": "boolean",
              "description": "Store parsed JSON response as variables.\nDefault is `false`."
            }
          },
          "required": [
            "url",
            "method"
          ],
          "description": "Send a GET, POST, PUT, or DELETE request to a remote URL.",
          "additionalProperties": false
        }
      },
      "required": [
        "request"
      ],
      "additionalProperties": false
    },
    "Return": {
      "type": "object",
      "properties": {
        "return": {
          "description": "Return from `execute` or exit script. Takes user-defined key to be used to store the value."
        }
      },
      "required": [
        "return"
      ],
      "additionalProperties": false
    },
    "SendDigits": {
      "type": "object",
      "properties": {
        "send_digits": {
          "type": "object",
          "properties": {
            "digits": {
              "type": "string",
              "description": "The DTMF digits to send."
            }
          },
          "required": [
            "digits"
          ],
          "description": "Send DTMF digits.",
          "additionalProperties": false
        }
      },
      "required": [
        "send_digits"
      ],
      "additionalProperties": false
    },
    "SendFax": {
      "type": "object",
      "properties": {
        "send_fax": {
          "type": "object",
          "properties": {
            "document": {
              "type": "string",
              "format": "uri",
              "description": "URL to the PDF document to fax."
            },
            "header_info": {
              "type": "string",
              "description": "Header text to include on the fax."
            },
            "identity": {
              "type": "string",
              "description": "Station identity to report.\nDefault is the calling party's caller ID number."
            }
          },
          "required": [
            "document"
          ],
          "description": "Send a fax.",
          "additionalProperties": false
        }
      },
      "required": [
        "send_fax"
      ],
      "additionalProperties": false
    },
    "SendSMS": {
      "type": "object",
      "properties": {
        "send_sms": {
          "oneOf": [
            {
              "$ref": "#/$defs/SMSWithBody"
            },
            {
              "$ref": "#/$defs/SMSWithMedia"
            }
          ],
          "description": "Send a text message to a PSTN phone number."
        }
      },
      "required": [
        "send_sms"
      ],
      "additionalProperties": false
    },
    "Set": {
      "type": "object",
      "properties": {
        "set": {
          "type": "object",
          "properties": {},
          "additionalProperties": {},
          "description": "Set script variables to the specified values.\nNo specific parameters.\nAccepts an object mapping variable names to values."
        }
      },
      "required": [
        "set"
      ],
      "additionalProperties": false
    },
    "Sleep": {
      "type": "object",
      "properties": {
        "sleep": {
          "type": "integer",
          "minimum": -1,
          "description": "The amount of time to sleep in milliseconds. Must be a `positive integer`. Can also be set to a `-1` integer for the sleep to never end."
        }
      },
      "required": [
        "sleep"
      ],
      "additionalProperties": false
    },
    "SIPRefer": {
      "type": "object",
      "properties": {
        "sip_refer": {
          "type": "object",
          "properties": {
            "to_uri": {
              "type": "string",
              "description": "The SIP URI to send the REFER to."
            }
          },
          "description": "Send SIP REFER to a SIP call.",
          "additionalProperties": false
        }
      },
      "required": [
        "sip_refer"
      ],
      "additionalProperties": false
    },
    "StopDenoise": {
      "type": "object",
      "properties": {
        "stop_denoise": {
          "type": "object",
          "properties": {},
          "description": "Stops the current denoise session.",
          "additionalProperties": false
        }
      },
      "required": [
        "stop_denoise"
      ],
      "additionalProperties": false
    },
    "StopRecordCall": {
      "type": "object",
      "properties": {
        "stop_record_call": {
          "type": "object",
          "properties": {
            "control_id": {
              "type": "string",
              "description": "Identifier for the recording to stop.\nIf not set, the last recording started will be stopped."
            }
          },
          "description": "Stop an active background recording.",
          "additionalProperties": false
        }
      },
      "required": [
        "stop_record_call"
      ],
      "additionalProperties": false
    },
    "StopTap": {
      "type": "object",
      "properties": {
        "stop_tap": {
          "type": "object",
          "properties": {
            "control_id": {
              "type": "string",
              "description": "ID of the tap to stop.\nIf not set, it will shut off the most recent tap session."
            }
          },
          "description": "Stop an active tap stream.",
          "additionalProperties": false
        }
      },
      "required": [
        "stop_tap"
      ],
      "additionalProperties": false
    },
    "Switch": {
      "type": "object",
      "properties": {
        "switch": {
          "type": "object",
          "properties": {
            "variable": {
              "type": "string",
              "description": "Name of the variable whose value needs to be compared"
            },
            "case": {
              "type": "object",
              "properties": {},
              "additionalProperties": {
                "type": "array",
                "items": {
                  "$ref": "#/$defs/SWMLMethod"
                }
              },
              "description": "Object of values mapped to array of instructions to execute"
            },
            "default": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/SWMLMethod"
              },
              "description": "Array of instructions to execute if no cases match"
            }
          },
          "required": [
            "variable",
            "case"
          ],
          "description": "Execute a sequence of instructions depending on which value matches a variable.",
          "additionalProperties": false
        }
      },
      "required": [
        "switch"
      ],
      "additionalProperties": false
    },
    "Tap": {
      "type": "object",
      "properties": {
        "tap": {
          "type": "object",
          "properties": {
            "uri": {
              "type": "string",
              "description": "Destination of the tap media stream."
            },
            "control_id": {
              "type": "string",
              "description": "Identifier for this tap to use with `stop_tap`."
            },
            "direction": {
              "anyOf": [
                {
                  "type": "string",
                  "const": "speak"
                },
                {
                  "type": "string",
                  "const": "listen"
                },
                {
                  "type": "string",
                  "const": "both"
                }
              ],
              "description": "Direction of the audio to tap:\n    `speak` for what party says,\n    `listen` for what party hears,\n    `both` for what party hears and says.\n    Default is `both`"
            },
            "codec": {
              "anyOf": [
                {
                  "type": "string",
                  "const": "PCMU"
                },
                {
                  "type": "string",
                  "const": "PCMA"
                }
              ],
              "description": "Codec to use for the tap media stream.\nPossible Values: [`PCMU`, `PCMA`]\nDefault is `PCMU`"
            },
            "rtp_ptime": {
              "type": "integer",
              "description": "If `uri` is a `rtp://` this will set the packetization time of the media in milliseconds.\nDefault is `20` miliseconds."
            }
          },
          "required": [
            "uri"
          ],
          "description": "Start background call tap. Media is streamed over Websocket or RTP to customer controlled URI.",
          "additionalProperties": false
        }
      },
      "required": [
        "tap"
      ],
      "additionalProperties": false
    },
    "Transfer": {
      "type": "object",
      "properties": {
        "transfer": {
          "type": "object",
          "properties": {
            "dest": {
              "type": "string",
              "description": "Specifies where to transfer the call. The value can be one of:\n    - `<section_name>` - section in the SWML document to jump to.\n    - `https://<URL>` - URL pointing to the document to transfer to. Sends HTTP POST."
            },
            "params": {
              "type": "object",
              "properties": {},
              "additionalProperties": {},
              "description": "Named parameters to send to transfer destination.\nAccepts an object mapping variable names to values.\nDefault is not set."
            },
            "meta": {
              "type": "object",
              "properties": {},
              "additionalProperties": {},
              "description": "User data, ignored by SignalWire.\nAccepts an object mapping variable names to values.\nDefault is not set."
            }
          },
          "required": [
            "dest"
          ],
          "description": "Transfer the execution of the script to a new URL or SWML Section.",
          "additionalProperties": false
        }
      },
      "required": [
        "transfer"
      ],
      "additionalProperties": false
    },
    "Unset": {
      "type": "object",
      "properties": {
        "unset": {
          "type": "object",
          "properties": {
            "vars": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              ],
              "description": "Names of the variables to unset."
            }
          },
          "required": [
            "vars"
          ],
          "description": "Un set a variable that as been `set`.",
          "additionalProperties": false
        }
      },
      "required": [
        "unset"
      ],
      "additionalProperties": false
    },
    "Languages": {
      "oneOf": [
        {
          "$ref": "#/$defs/LanguagesWithSoloFillers"
        },
        {
          "$ref": "#/$defs/LanguagesWithFillers"
        }
      ]
    },
    "AIParams": {
      "type": "object",
      "properties": {
        "acknowledge_interruptions": {
          "type": "boolean",
          "description": "Instructs the agent to acknowledge crosstalk and confirm user input when the user speaks over the agent."
        },
        "ai_volume": {
          "type": "integer",
          "minimum": -50,
          "maximum": 50,
          "description": "Adjust the volume of the AI. Allowed values from `-50` - `50`."
        },
        "attention_timeout": {
          "anyOf": [
            {
              "type": "integer"
            },
            {
              "type": "number",
              "const": 0
            }
          ],
          "minimum": 10000,
          "maximum": 600000,
          "description": "Amount of time, in ms, to wait before prompting the user to respond. Allowed values from `10,000` - `600,000`. Set to `0` to disable."
        },
        "attention_timeout_prompt": {
          "type": "string",
          "description": "A custom prompt that is fed into the AI when the attention_timeout is reached."
        },
        "background_file": {
          "type": "string",
          "format": "uri",
          "description": "URL of audio file to play in the background while AI plays in foreground."
        },
        "background_file_loops": {
          "anyOf": [
            {
              "type": "integer"
            },
            {
              "type": "null"
            }
          ],
          "description": "Maximum number of times to loop playing the background file. `undefined` means loop indefinitely."
        },
        "background_file_volume": {
          "type": "integer",
          "minimum": -50,
          "maximum": 50,
          "description": "Defines background_file volume within a range of `-50` to `50`."
        },
        "barge_match_string": {
          "type": "string",
          "description": "Takes a string, including a regular expression, defining barge behavior.\n For example, this param can direct the AI to stop when the word 'hippopotomus' is input."
        },
        "barge_min_words": {
          "type": "integer",
          "minimum": 1,
          "maximum": 99,
          "description": "\tDefines the number of words that must be input before triggering barge behavior, in a range of `1-99`."
        },
        "conscience": {
          "type": "string",
          "description": "Sets the prompt which binds the agent to its purpose."
        },
        "conversation_id": {
          "type": "string",
          "description": "Used by `check_for_input` and `save_conversation` to identify an individual conversation."
        },
        "debug_webhook_level": {
          "type": "integer",
          "minimum": 0,
          "maximum": 1,
          "description": "Enables debugging to the set URL. Allowed values from `0` - `1`."
        },
        "debug_webhook_url": {
          "type": "string",
          "format": "uri",
          "description": "Each interaction between the AI and end user is posted in real time to the established URL."
        },
        "direction": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/Direction"
          },
          "description": "Forces the direction of the call to the assistant. Valid values are `inbound` and `outbound`."
        },
        "digit_termiantors": {
          "type": "string",
          "description": "DTMF digit, as a string, to signal the end of input (ex: '#')"
        },
        "digit_timeout": {
          "type": "integer",
          "minimum": 250,
          "maximum": 10000,
          "description": "Time, in ms, at the end of digit input to detect end of input. Allowed values from `250` - `10,000`."
        },
        "end_of_speech_timeout": {
          "type": "integer",
          "minimum": 250,
          "maximum": 10000,
          "description": "Amount of silence, in ms, at the end of an utterance to detect end of speech. Allowed values from `250` - `10,000`."
        },
        "eleven_labs_stability": {
          "type": "number",
          "description": "The stability slider determines how stable the voice is and the randomness between each generation. Lowering this slider introduces a broader emotional range for the voice."
        },
        "eleven_labs_similarity": {
          "type": "number",
          "description": "The similarity slider dictates how closely the AI should adhere to the original voice when attempting to replicate it. The higher the similarity, the closer the AI will sound to the original voice."
        },
        "energy_level": {
          "type": "number",
          "minimum": 0,
          "maximum": 100,
          "description": "Amount of energy necessary for bot to hear you (in dB). Allowed values from `0.0` - `100.0`."
        },
        "hold_music": {
          "type": "string",
          "format": "uri",
          "description": "A URL for the hold music to play, accepting WAV, mp3, and FreeSWITCH tone_stream."
        },
        "hold_on_process": {
          "type": "boolean",
          "description": "Enables hold music during SWAIG processing."
        },
        "inactivity_timeout": {
          "type": "integer",
          "minimum": 10000,
          "maximum": 3600000,
          "description": "Amount of time, in ms, to wait before exiting the app due to inactivity. Allowed values from `10,000` - `3,600,000`."
        },
        "input_poll_freq": {
          "type": "string",
          "description": "Check for input function with check_for_input. \nExample use case: Feeding an inbound SMS to AI on a voice call, eg., for collecting an email address or other complex information."
        },
        "interrupt_on_noise": {
          "type": "boolean",
          "description": "When enabled, barges agent upon any sound interruption longer than 1 second."
        },
        "interrupt_prompt": {
          "type": "string",
          "description": "Provide a prompt for the agent to handle crosstalk."
        },
        "languages_enabled": {
          "type": "boolean",
          "description": "Allows multilingualism when `true`."
        },
        "local_tz": {
          "type": "string",
          "description": "The local timezone setting for the AI. Value should use `IANA TZ ID`"
        },
        "outbound_attention_timeout": {
          "type": "integer",
          "minimum": 10000,
          "maximum": 600000,
          "description": "Sets a time duration for the outbound call recipient to respond to the AI agent before timeout, in a range from `10000` to `600000`."
        },
        "save_conversation": {
          "type": "boolean",
          "description": "Send a summary of the conversation after the call ends.\nThis requires a `post_url` to be set in the ai parameters and the `conversation_id` defined below.\nThis eliminates the need for a `post_prompt` in the ai parameters."
        },
        "swaig_allow_settings": {
          "type": "boolean",
          "description": "Allows tweaking any of the indicated settings, such as `barge_match_string`, using the returned SWML from the SWAIG function."
        },
        "swaig_allow_swml": {
          "type": "boolean",
          "description": "Allows your SWAIG to return SWML to be executed."
        },
        "swaig_post_conversation": {
          "type": "boolean",
          "description": "Post entire conversation to any SWAIG call."
        },
        "transfer_summary": {
          "type": "boolean",
          "description": "Pass a summary of a conversation from one AI agent to another. For example, transfer a call summary between support agents in two departments."
        },
        "verbose_logs": {
          "type": "boolean",
          "description": "Enable verbose logging."
        },
        "wait_for_user": {
          "type": "boolean",
          "description": "When false, AI agent will initialize dialogue after call is setup. When true, agent will wait for the user to speak first."
        }
      },
      "additionalProperties": false
    },
    "AIPrompt": {
      "type": "object",
      "properties": {
        "text": {
          "type": "string",
          "description": "The instructions to send to the agent."
        },
        "temperature": {
          "type": "number",
          "minimum": 0,
          "maximum": 1.5,
          "description": "Randomness setting. Float value between 0.0 and 1.5. Closer to 0 will make the output less random."
        },
        "top_p": {
          "type": "number",
          "minimum": 0,
          "maximum": 1,
          "description": "Randomness setting. Alternative to `temperature`. Float value between 0.0 and 1.0. Closer to 0 will make the output less random."
        },
        "confidence": {
          "type": "number",
          "minimum": 0,
          "maximum": 1,
          "description": "Threshold to fire a speech-detect event at the end of the utterance. Float value between 0.0 and 1.0. \nDecreasing this value will reduce the pause after the user speaks, but may introduce false positives."
        },
        "presence_penalty": {
          "type": "number",
          "minimum": -2,
          "maximum": 2,
          "description": "Aversion to staying on topic. Float value between -2.0 and 2.0. Positive values increase the model's likelihood to talk about new topics."
        },
        "frequency_penalty": {
          "type": "number",
          "minimum": -2,
          "maximum": 2,
          "description": "Aversion to repeating lines. Float value between -2.0 and 2.0. Positive values decrease the model's likelihood to repeat the same line verbatim."
        }
      },
      "required": [
        "text"
      ],
      "additionalProperties": false
    },
    "Pronounce": {
      "type": "object",
      "properties": {
        "replace": {
          "type": "string",
          "description": "The expression to replace."
        },
        "with": {
          "type": "string",
          "description": "The phonetic spelling of the expression."
        },
        "ignore_case": {
          "type": "boolean",
          "description": "Whether the pronunciation replacement should ignore case."
        }
      },
      "required": [
        "replace",
        "with"
      ],
      "additionalProperties": false
    },
    "SWAIG": {
      "type": "object",
      "properties": {
        "defaults": {
          "$ref": "#/$defs/SWAIGDefaults",
          "description": "Default settings for all SWAIG functions. If `defaults` is not set, settings may be set in each function object. Default is not set."
        },
        "native_functions": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/SWAIGNativeFunction"
          },
          "description": "Prebuilt functions the AI agent is able to call from this list of available native functions"
        },
        "includes": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/SWAIGIncludes"
          },
          "description": "An array of objects to include remote function signatures.\nThe object fields are url to specify where the remote functions are defined and functions which is an array of the function names as strings."
        },
        "functions": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/SWAIGFunction"
          },
          "description": "An array of JSON objects to define functions that can be executed during the interaction with the AI. Default is not set.\nThe fields of this object are the six following."
        }
      },
      "additionalProperties": false
    },
    "CondParams": {
      "oneOf": [
        {
          "$ref": "#/$defs/CondReg"
        },
        {
          "$ref": "#/$defs/CondElse"
        }
      ]
    },
    "ConnectDeviceSingle": {
      "type": "object",
      "properties": {
        "to": {
          "type": "string",
          "description": "The SIP URI or phone number to dial."
        }
      },
      "required": [
        "to"
      ],
      "allOf": [
        {
          "$ref": "#/$defs/ConnectDeviceBase"
        }
      ],
      "additionalProperties": false
    },
    "ConnectDeviceSerial": {
      "type": "object",
      "properties": {
        "serial": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/ConnectDeviceSingle"
          }
        }
      },
      "required": [
        "serial"
      ],
      "allOf": [
        {
          "$ref": "#/$defs/ConnectDeviceBase"
        }
      ],
      "additionalProperties": false
    },
    "ConnectDeviceParallel": {
      "type": "object",
      "properties": {
        "parallel": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/ConnectDeviceSingle"
          },
          "description": "Array of destinations to dial simultaneously."
        }
      },
      "required": [
        "parallel"
      ],
      "allOf": [
        {
          "$ref": "#/$defs/ConnectDeviceBase"
        }
      ],
      "additionalProperties": false
    },
    "ConnectDeviceSerialParallel": {
      "type": "object",
      "properties": {
        "serial_parallel": {
          "type": "array",
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/$defs/ConnectDeviceSingle"
            }
          },
          "description": "Array of arrays.\nInner arrays contain destinations to dial simultaneously.\nOuter array attempts each parallel group in order."
        }
      },
      "required": [
        "serial_parallel"
      ],
      "allOf": [
        {
          "$ref": "#/$defs/ConnectDeviceBase"
        }
      ],
      "additionalProperties": false
    },
    "ExecuteSwitch": {
      "type": "object",
      "properties": {
        "variable": {
          "type": "string",
          "description": "Name of the variable whose value needs to be compared. If not provided, it will check the `return_value` variable.\nCan be one of the listed set of variables, or a string to represent a custom variable."
        },
        "case": {
          "type": "object",
          "properties": {},
          "additionalProperties": {
            "type": "array",
            "items": {
              "$ref": "#/$defs/SWMLMethod"
            }
          },
          "description": "Object of values mapped to array of instructions to execute"
        },
        "default": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/SWMLMethod"
          },
          "description": "Array of instructions to execute if no cases match"
        }
      },
      "required": [
        "case"
      ],
      "additionalProperties": false
    },
    "TranscribeAction": {
      "oneOf": [
        {
          "$ref": "#/$defs/TranscribeStartAction"
        },
        {
          "type": "string",
          "const": "stop",
          "description": "Stops live transcription of the call."
        },
        {
          "$ref": "#/$defs/TranscribeSummarizeActionUnion"
        }
      ]
    },
    "TranslateAction": {
      "oneOf": [
        {
          "$ref": "#/$defs/StartAction"
        },
        {
          "type": "string",
          "const": "stop",
          "description": "Stops live translation of the call."
        },
        {
          "$ref": "#/$defs/SummarizeActionUnion"
        },
        {
          "$ref": "#/$defs/InjectAction"
        }
      ]
    },
    "PlayWithURL": {
      "type": "object",
      "properties": {
        "auto_answer": {
          "type": "boolean"
        },
        "volume": {
          "type": "number",
          "minimum": -40,
          "maximum": 40,
          "description": "Volume level for the audio file.\nDefault is `0`.\nValid range is -40 to 40"
        },
        "say_voice": {
          "type": "string",
          "description": "The voice to use for the text to speech.\nDefault is `Polly.Salli`"
        },
        "say_language": {
          "type": "string",
          "description": "The language to use for the text to speech.\nDefault is `en-US`"
        },
        "say_gender": {
          "type": "string",
          "description": "Gender to use for the text to speech.\nDefault is `female`."
        },
        "url": {
          "$ref": "#/$defs/play_url",
          "description": "URL to play.\nRequired if `urls` is not present.\nAllowed URLs are:\n    - http:// or https:// - audio file to GET\n    - ring:[duration:]<country code> - ring tone to play. For example: ring:us to play single ring or ring:20.0:us to play ring for 20 seconds.\n    - say:<text to speak> - Sentence to say\n    - silence: <duration> - seconds of silence to play"
        }
      },
      "required": [
        "url"
      ],
      "description": "Play with a single URL",
      "additionalProperties": false
    },
    "PlayWithURLS": {
      "type": "object",
      "properties": {
        "auto_answer": {
          "type": "boolean"
        },
        "volume": {
          "type": "number",
          "minimum": -40,
          "maximum": 40,
          "description": "Volume level for the audio file.\nDefault is `0`.\nValid range is -40 to 40"
        },
        "say_voice": {
          "type": "string",
          "description": "The voice to use for the text to speech.\nDefault is `Polly.Salli`"
        },
        "say_language": {
          "type": "string",
          "description": "The language to use for the text to speech.\nDefault is `en-US`"
        },
        "say_gender": {
          "type": "string",
          "description": "Gender to use for the text to speech.\nDefault is `female`."
        },
        "urls": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/play_url"
          },
          "description": "Array of URLs to play.\nRequired if `url` is not present.\nAllowed URLs are:\n    - http:// or https:// - audio file to GET\n    - ring:[duration:]<country code> - ring tone to play. For example: ring:us to play single ring or ring:20.0:us to play ring for 20 seconds.\n    - say:<text to speak> - Sentence to say\n    - silence: <duration> - seconds of silence to play"
        }
      },
      "required": [
        "urls"
      ],
      "additionalProperties": false
    },
    "play_url": {
      "type": "string",
      "pattern": "^(http://.*|https://.*|ring: ?[0-9.]*: ?[a-zA-Z]{2}|say: ?.*|silence: ?[0-9.]*|ring: ?[a-zA-Z]{2})$"
    },
    "SMSWithBody": {
      "type": "object",
      "properties": {
        "body": {
          "type": "string",
          "description": "Required if `media` is not present. The body of the SMS message."
        },
        "media": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Optional if `body` is present. Array of media URLs to include in the message."
        }
      },
      "required": [
        "body"
      ],
      "allOf": [
        {
          "$ref": "#/$defs/SMSBase"
        }
      ],
      "additionalProperties": false
    },
    "SMSWithMedia": {
      "type": "object",
      "properties": {
        "media": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Required if `body` is not present. Array of media URLs to include in the message."
        },
        "body": {
          "type": "string",
          "description": "Optional if `media` is present. The body of the SMS message."
        }
      },
      "required": [
        "media"
      ],
      "allOf": [
        {
          "$ref": "#/$defs/SMSBase"
        }
      ],
      "additionalProperties": false
    },
    "LanguagesWithSoloFillers": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the language ('French', 'English', etc)."
        },
        "code": {
          "type": "string",
          "description": "Language code. For example, 'fr-FR'."
        },
        "voice": {
          "type": "string",
          "description": "Voice to use for the language. For example, 'fr-FR-Neural2-B'."
        },
        "engine": {
          "type": "string",
          "description": "The engine to use for the language. For example, 'elevenlabs'.",
          "deprecated": true
        },
        "fillers": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "An array of strings to be used as fillers in the conversation. This will be used for both speech and function fillers if provided.",
          "deprecated": true
        }
      },
      "required": [
        "name",
        "code",
        "voice"
      ],
      "additionalProperties": false
    },
    "LanguagesWithFillers": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the language ('French', 'English', etc)."
        },
        "code": {
          "type": "string",
          "description": "Language code. For example, 'fr-FR'."
        },
        "voice": {
          "type": "string",
          "description": "Voice to use for the language. For example, 'fr-FR-Neural2-B'."
        },
        "engine": {
          "type": "string",
          "description": "The engine to use for the language. For example, 'elevenlabs'.",
          "deprecated": true
        },
        "function_fillers": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "An array of strings to be used as fillers in the conversation when calling a `swaig function`. This helps the AI break silence between responses."
        },
        "speech_fillers": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "An array of strings to be used as fillers in the conversation. This helps the AI break silence between responses."
        }
      },
      "required": [
        "name",
        "code",
        "voice"
      ],
      "additionalProperties": false
    },
    "Direction": {
      "type": "string",
      "enum": [
        "inbound",
        "outbound"
      ]
    },
    "SWAIGDefaults": {
      "type": "object",
      "properties": {
        "web_hook_url": {
          "type": "string",
          "description": "Default URL to send status callbacks and reports to. Authentication can also be set in the url in the format of `username:password@url.`"
        }
      },
      "additionalProperties": false
    },
    "SWAIGNativeFunction": {
      "type": "string",
      "enum": [
        "check_time",
        "wait_seconds"
      ]
    },
    "SWAIGIncludes": {
      "type": "object",
      "properties": {
        "functions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Remote functions to fetch and include in your AI application."
        },
        "url": {
          "type": "string",
          "description": "URL to fetch remote functions and include in your AI application. Authentication can also be set in the url in the format of `username:password@url`."
        },
        "meta_data": {
          "type": "object",
          "properties": {},
          "additionalProperties": {},
          "description": ""
        }
      },
      "required": [
        "functions",
        "url"
      ],
      "additionalProperties": false
    },
    "SWAIGFunction": {
      "type": "object",
      "properties": {
        "function": {
          "type": "string",
          "description": "A unique name for the function. For example, 'get_weather'."
        },
        "purpose": {
          "type": "string",
          "description": "A description of the context and purpose of the function, to explain to the agent when to use it."
        },
        "argument": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "description": "The type of argument the AI is passing to the function. Possible values are 'string' and 'object'."
            },
            "properties": {
              "type": "object",
              "properties": {},
              "additionalProperties": {
                "type": "object",
                "properties": {
                  "description": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  }
                },
                "required": [
                  "description",
                  "type"
                ]
              },
              "description": "A JSON object describing the argument. The value is set by the user. \nFor example, \"location\" for a location-based search or \"company\" if searching a database of companies.\nThis object has sub-parameters description and type to help define the property."
            }
          },
          "required": [
            "type",
            "properties"
          ],
          "description": "A JSON object defining the input that should be passed to the function. The fields of this object are the following two parameters.",
          "additionalProperties": false
        },
        "active": {
          "type": "boolean",
          "description": "Whether the function is active. Default is `true`."
        },
        "meta_data": {
          "type": "object",
          "properties": {},
          "additionalProperties": {},
          "description": "A powerful and flexible environmental variable which can accept arbitrary data that is set initially in the SWML script or from the SWML set_meta_data action.\nThis data can be referenced locally to the function.\nAll contained information can be accessed and expanded within the prompt - for example, by using a template string.\nDefault is not set."
        },
        "meta_data_token": {
          "type": "string",
          "description": "Scoping token for meta_data. If not supplied, metadata will be scoped to function's `web_hook_url`. Default is set by SignalWire."
        },
        "data_map": {
          "$ref": "#/$defs/DataMap",
          "description": "An object containing properties to process or validate the input,\nperform actions based on the input, or connect to external APIs or services in a serverless fashion."
        },
        "web_hook_url": {
          "type": "string",
          "description": "Function-specific URL to send status callbacks and reports to. Takes precedence over a default setting. Authentication can also be set in the url in the format of `username:password@url.`"
        },
        "wait_file": {
          "type": "string",
          "format": "uri",
          "description": "A file to play while the function is running. `wait_file_loops` can specify the amount of times that files should continously play. Default is not set."
        },
        "wait_file_loops": {
          "anyOf": [
            {
              "type": "integer"
            },
            {
              "type": "string"
            }
          ],
          "description": "The number of times to loop playing the file. Default is not set."
        }
      },
      "required": [
        "function",
        "purpose"
      ],
      "additionalProperties": false
    },
    "CondReg": {
      "type": "object",
      "properties": {
        "when": {
          "type": "string",
          "description": "The condition to be evaluated and act on."
        },
        "then": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/SWMLMethod"
          },
          "description": "The list of SWML instructions to be executed if the condition is `true`"
        },
        "else": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/SWMLMethod"
          },
          "description": "The list of SWML instructions to be executed if the condition is `false`."
        }
      },
      "required": [
        "when",
        "then"
      ],
      "additionalProperties": false
    },
    "CondElse": {
      "type": "object",
      "properties": {
        "else": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/SWMLMethod"
          },
          "description": "The list of SWML instructions to be executed if the condition is `false`."
        }
      },
      "required": [
        "else"
      ],
      "additionalProperties": false
    },
    "ConnectDeviceBase": {
      "type": "object",
      "properties": {
        "from": {
          "type": "string",
          "description": "The caller ID to use when dialing the number."
        },
        "headers": {
          "type": "object",
          "properties": {},
          "additionalProperties": {},
          "description": "Custom SIP headers to add to INVITE. It Has no effect on calls to phone numbers."
        },
        "codecs": {
          "type": "string",
          "description": "Comma-separated string of codecs to offer.\nIt has no effect on calls to phone numbers.\nBased on SignalWire settings."
        },
        "webrtc_media": {
          "type": "boolean",
          "description": "If true, WebRTC media is offered to the SIP endpoint.\nIt has no effect on calls to phone numbers.\nDefault is `false`."
        },
        "session_timeout": {
          "type": "integer",
          "minimum": 1,
          "description": "Time, in seconds, to set the SIP `Session-Expires` header in INVITE.\nMust be a positive, non-zero number.\nIt has no effect on calls to phone numbers.\nBased on SignalWire settings."
        },
        "ringback": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Array of URIs to play as ringback tone."
        },
        "result": {
          "anyOf": [
            {
              "$ref": "#/$defs/ConnectSwitch"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/CondParams"
              },
              "description": "Execute a sequence of instructions depending on the value of a JavaScript condition."
            }
          ],
          "description": "`switch` on `return_value` when object `{}` or `cond` when array `[]`"
        },
        "timeout": {
          "type": "integer",
          "description": "Time, in seconds, to wait for the call to be answered.\nDefault is 60 seconds."
        },
        "max_duration": {
          "type": "integer",
          "description": "Maximum duration, in seconds, allowed for the call.\nDefault is `14400` seconds."
        },
        "answer_on_bridge": {
          "type": "boolean",
          "description": "Delay answer until the B-leg answers.\nDefault is `false`."
        },
        "call_state_url": {
          "type": "string",
          "description": "Webhook URL to send call state change notifications to for all legs. It can be overwritten on each destination."
        },
        "call_state_events": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "An array of call state event names to be notified about.\nAllowed event names are:\n    - `created`\n    - `ringing`\n    - `answered`\n    - `ended`"
        },
        "confirm": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ValidConfirmMethods"
              }
            }
          ],
          "description": "Confirmation object or string."
        },
        "confirm_timeout": {
          "type": "integer",
          "description": "Timeout for confirmation."
        },
        "username": {
          "type": "string",
          "description": "Username for authentication."
        },
        "password": {
          "type": "string",
          "description": "Password for authentication."
        },
        "encryption": {
          "anyOf": [
            {
              "type": "string",
              "const": "mandatory"
            },
            {
              "type": "string",
              "const": "optional"
            },
            {
              "type": "string",
              "const": "forbidden"
            }
          ],
          "description": "Encryption setting to use."
        }
      },
      "additionalProperties": false
    },
    "TranscribeStartAction": {
      "type": "object",
      "properties": {
        "start": {
          "type": "object",
          "properties": {
            "webhook": {
              "type": "string",
              "description": "The webhook URL the transcription will be sent to."
            },
            "lang": {
              "type": "string",
              "description": "The language to transcribe."
            },
            "live_events": {
              "type": "boolean",
              "description": "Whether to enable live events."
            },
            "ai_summary": {
              "type": "boolean",
              "description": "Whether to enable AI summarization."
            },
            "speech_timeout": {
              "type": "integer",
              "description": "The timeout for speech recognition."
            },
            "vad_silence_ms": {
              "type": "integer",
              "description": "Voice activity detection silence time in milliseconds."
            },
            "vad_thresh": {
              "type": "integer",
              "description": "Voice activity detection threshold."
            },
            "debug_level": {
              "type": "integer",
              "description": "Debug level for logging"
            },
            "direction": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/TranscribeDirection"
              },
              "description": "The direction of the call that should be transcribed."
            },
            "speech_engine": {
              "type": "string",
              "description": "The speech engine to be used."
            },
            "summary_prompt": {
              "type": "string",
              "description": "The prompt for summarizaton."
            }
          },
          "required": [
            "lang",
            "direction",
            "speech_engine"
          ],
          "description": "Starts live transcription of the call. The transcription will be sent to the specified URL.",
          "additionalProperties": false
        }
      },
      "required": [
        "start"
      ],
      "additionalProperties": false
    },
    "TranscribeSummarizeActionUnion": {
      "oneOf": [
        {
          "$ref": "#/$defs/TranscribeSummarizeAction"
        },
        {
          "type": "string",
          "const": "summarize",
          "description": "Summarizes the conversation as a string value."
        }
      ]
    },
    "StartAction": {
      "type": "object",
      "properties": {
        "start": {
          "type": "object",
          "properties": {
            "webhook": {
              "type": "string",
              "description": "The webhook URL to be called."
            },
            "from_lang": {
              "type": "string",
              "description": "The language to translate from."
            },
            "to_lang": {
              "type": "string",
              "description": "The language to translate to."
            },
            "from_voice": {
              "type": "string",
              "description": "The TTS voice you want to use for the source language."
            },
            "to_voice": {
              "type": "string",
              "description": "The TTS voice you want to use for the target language."
            },
            "live_events": {
              "type": "boolean",
              "description": "Whether to enable live events."
            },
            "ai_summary": {
              "type": "boolean",
              "description": "Whether to enable AI summarization."
            },
            "speech_timeout": {
              "type": "integer",
              "description": "The timeout for speech recognition."
            },
            "vad_silence_ms": {
              "type": "integer",
              "description": "Voice activity detection silence time in milliseconds."
            },
            "vad_thresh": {
              "type": "integer",
              "description": "Voice activity detection threshold."
            },
            "debug_level": {
              "type": "integer",
              "description": "Debug level for logging"
            },
            "direction": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/TranslateDirection"
              },
              "description": "The direction of the call that should be translated."
            },
            "speech_engine": {
              "type": "string",
              "description": "The speech engine to be used."
            },
            "summary_prompt": {
              "type": "string",
              "description": "The prompt for summarizaton."
            }
          },
          "required": [
            "from_lang",
            "to_lang",
            "direction",
            "speech_engine"
          ],
          "description": "Starts live translation of the call. The translation will be sent to the specified URL.",
          "additionalProperties": false
        }
      },
      "required": [
        "start"
      ],
      "additionalProperties": false
    },
    "SummarizeActionUnion": {
      "oneOf": [
        {
          "$ref": "#/$defs/SummarizeAction"
        },
        {
          "type": "string",
          "const": "summarize",
          "description": "Summarizes the conversation as a string value."
        }
      ]
    },
    "InjectAction": {
      "type": "object",
      "properties": {
        "inject": {
          "type": "object",
          "properties": {
            "message": {
              "type": "string",
              "description": "The message to be injected"
            },
            "direction": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/TranslateDirection"
              },
              "description": "The direction of the message that should be injected."
            }
          },
          "required": [
            "message",
            "direction"
          ],
          "description": "Injects a message into the conversation.",
          "additionalProperties": false
        }
      },
      "required": [
        "inject"
      ],
      "additionalProperties": false
    },
    "SMSBase": {
      "type": "object",
      "properties": {
        "to_number": {
          "type": "string",
          "description": "The phone number to send the SMS to."
        },
        "from_number": {
          "type": "string",
          "description": "The phone number to send the SMS from.\nDefault is the calling party's caller ID number."
        },
        "region": {
          "type": "string",
          "description": "The region to use for the SMS."
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Array of tags to associate with the message to facilitate log searches."
        }
      },
      "required": [
        "to_number",
        "from_number"
      ],
      "additionalProperties": false
    },
    "DataMap": {
      "oneOf": [
        {
          "$ref": "#/$defs/Output",
          "description": "An object that defines the output of the SWAIG function."
        },
        {
          "$ref": "#/$defs/Expression",
          "description": "An array of objects that define patterns and corresponding actions."
        },
        {
          "$ref": "#/$defs/Webhook",
          "description": "An array of objects that define external API calls."
        }
      ]
    },
    "ConnectSwitch": {
      "type": "object",
      "properties": {
        "variable": {
          "type": "string",
          "description": "Name of the variable whose value needs to be compared. If not provided, it will check the `connect_result` variable."
        },
        "case": {
          "type": "object",
          "properties": {},
          "additionalProperties": {
            "type": "array",
            "items": {
              "$ref": "#/$defs/SWMLMethod"
            }
          },
          "description": "Object of values mapped to array of instructions to execute"
        },
        "default": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/SWMLMethod"
          },
          "description": "Array of instructions to execute if no cases match"
        }
      },
      "required": [
        "case"
      ],
      "additionalProperties": false
    },
    "ValidConfirmMethods": {
      "anyOf": [
        {
          "$ref": "#/$defs/Cond"
        },
        {
          "$ref": "#/$defs/Set"
        },
        {
          "$ref": "#/$defs/Unset"
        },
        {
          "$ref": "#/$defs/Hangup"
        },
        {
          "$ref": "#/$defs/Play"
        },
        {
          "$ref": "#/$defs/Prompt"
        },
        {
          "$ref": "#/$defs/Record"
        },
        {
          "$ref": "#/$defs/RecordCall"
        },
        {
          "$ref": "#/$defs/StopRecordCall"
        },
        {
          "$ref": "#/$defs/Tap"
        },
        {
          "$ref": "#/$defs/StopTap"
        },
        {
          "$ref": "#/$defs/SendDigits"
        },
        {
          "$ref": "#/$defs/SendSMS"
        },
        {
          "$ref": "#/$defs/Denoise"
        },
        {
          "$ref": "#/$defs/StopDenoise"
        }
      ]
    },
    "TranscribeDirection": {
      "type": "string",
      "enum": [
        "remote-caller",
        "local-caller"
      ]
    },
    "TranscribeSummarizeAction": {
      "type": "object",
      "properties": {
        "summarize": {
          "type": "object",
          "properties": {
            "webhook": {
              "type": "string",
              "description": "The webhook URL to be called."
            },
            "prompt": {
              "type": "string",
              "description": "The prompt for summarizaton."
            }
          },
          "description": "Summarizes the conversation as an object, allowing you to specify the webhook url and prompt for the summary.",
          "additionalProperties": false
        }
      },
      "required": [
        "summarize"
      ],
      "additionalProperties": false
    },
    "TranslateDirection": {
      "type": "string",
      "enum": [
        "remote-caller",
        "local-caller"
      ]
    },
    "SummarizeAction": {
      "type": "object",
      "properties": {
        "summarize": {
          "type": "object",
          "properties": {
            "webhook": {
              "type": "string",
              "description": "The webhook URL to be called."
            },
            "prompt": {
              "type": "string",
              "description": "The prompt for summarizaton."
            }
          },
          "description": "Summarizes the conversation as an object, allowing you to specify the webhook url and prompt for the summary.",
          "additionalProperties": false
        }
      },
      "required": [
        "summarize"
      ],
      "additionalProperties": false
    },
    "Output": {
      "type": "object",
      "properties": {
        "output": {
          "type": "object",
          "properties": {
            "response": {
              "type": "string",
              "description": "A static response text or message returned to the AI agents context."
            },
            "action": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/Action"
              },
              "description": "A list of actions to be performed upon matching."
            }
          },
          "required": [
            "response"
          ],
          "description": "An object that defines the `response` or `action` to be taken when the webhook is successfully triggered.",
          "additionalProperties": false
        }
      },
      "required": [
        "output"
      ],
      "additionalProperties": false
    },
    "Expression": {
      "type": "object",
      "properties": {
        "expressions": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "string": {
                "type": "string",
                "description": "The actual input or value from the user or system."
              },
              "pattern": {
                "type": "string",
                "description": "A regular expression pattern to validate or match the string."
              },
              "output": {
                "type": "object",
                "properties": {
                  "response": {
                    "type": "string",
                    "description": "A static response text or message returned to the AI agents context."
                  },
                  "action": {
                    "type": "array",
                    "items": {
                      "$ref": "#/$defs/Action"
                    },
                    "description": "A list of actions to be performed upon matching."
                  }
                },
                "required": [
                  "response"
                ],
                "description": "An object that defines the `response` or `action` to be taken when the webhook is successfully triggered.",
                "additionalProperties": false
              }
            },
            "required": [
              "string",
              "pattern",
              "output"
            ],
            "additionalProperties": false
          },
          "description": "An array of objects that define patterns and corresponding actions."
        }
      },
      "required": [
        "expressions"
      ],
      "additionalProperties": false
    },
    "Webhook": {
      "type": "object",
      "properties": {
        "webhooks": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "expressions": {
                "type": "array",
                "items": {
                  "$ref": "#/$defs/Expression"
                },
                "description": "A list of expressions to be evaluated upon matching."
              },
              "error_keys": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                ],
                "description": "A string or array of strings that represent the keys to be used for error handling. This will match the key(s) in the response from the API call."
              },
              "url": {
                "type": "string",
                "description": "The endpoint for the external service or API."
              },
              "foreach": {
                "type": "object",
                "properties": {
                  "input_key": {
                    "type": "string",
                    "description": "The key to be used to access the current element in the array."
                  },
                  "output_key": {
                    "type": "string",
                    "description": "The key that can be referenced in the output of the `foreach` iteration. The values that are stored from `append` will be stored in this key."
                  },
                  "max": {
                    "type": "integer",
                    "description": "The max amount of elements that are iterated over in the array. This will start at the beginning of the array."
                  },
                  "append": {
                    "type": "string",
                    "description": "The values to append to the output_key. \nProperties from the object can be referenced and added to the output_key by using the following syntax: \n${this.property_name}.\nThe `this` keyword is used to reference the current object in the array."
                  }
                },
                "required": [
                  "input_key",
                  "output_key",
                  "append"
                ],
                "description": "Iterates over an array of objects and processes a output based on each element in the array. Works similarly to JavaScript's forEach method.",
                "additionalProperties": false
              },
              "headers": {
                "type": "object",
                "properties": {},
                "additionalProperties": {},
                "description": "Any necessary headers for the API call."
              },
              "method": {
                "anyOf": [
                  {
                    "type": "string",
                    "const": "GET"
                  },
                  {
                    "type": "string",
                    "const": "POST"
                  },
                  {
                    "type": "string",
                    "const": "PUT"
                  },
                  {
                    "type": "string",
                    "const": "DELETE"
                  }
                ],
                "description": "The HTTP method (GET, POST, etc.) for the API call."
              },
              "input_args_as_params": {
                "type": "boolean",
                "description": "A boolean to determine if the input arguments should be passed as parameters."
              },
              "params": {
                "type": "object",
                "properties": {},
                "additionalProperties": {},
                "description": "An object of any necessary parameters for the API call. The key is the parameter name and the value is the parameter value."
              },
              "require_args": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                ],
                "description": "A string or array of strings that represent the `arguments` that are required to make the webhook request."
              },
              "output": {
                "type": "object",
                "properties": {
                  "response": {
                    "type": "string",
                    "description": "A static response text or message returned to the AI agents context."
                  },
                  "action": {
                    "type": "array",
                    "items": {
                      "$ref": "#/$defs/Action"
                    },
                    "description": "A list of actions to be performed upon matching."
                  }
                },
                "required": [
                  "response"
                ],
                "description": "An object that defines the `response` or `action` to be taken when the webhook is successfully triggered.",
                "additionalProperties": false
              }
            },
            "required": [
              "url",
              "output"
            ],
            "additionalProperties": false
          },
          "description": "An array of objects that define external API calls."
        }
      },
      "required": [
        "webhooks"
      ],
      "additionalProperties": false
    },
    "Action": {
      "anyOf": [
        {
          "$ref": "#/$defs/SWMLAction"
        },
        {
          "$ref": "#/$defs/ContextSwitchAction"
        },
        {
          "$ref": "#/$defs/PlaybackBGAction"
        },
        {
          "$ref": "#/$defs/SayAction"
        },
        {
          "$ref": "#/$defs/SetGlobalDataAction"
        },
        {
          "$ref": "#/$defs/SetMetaDataAction"
        },
        {
          "$ref": "#/$defs/StopAction"
        },
        {
          "$ref": "#/$defs/StopPlaybackBGAction"
        },
        {
          "$ref": "#/$defs/ToggleFunctionsAction"
        },
        {
          "$ref": "#/$defs/UnsetGlobalDataAction"
        },
        {
          "$ref": "#/$defs/UnsetMetaDataAction"
        },
        {
          "$ref": "#/$defs/UserInputAction"
        }
      ]
    },
    "SWMLAction": {
      "type": "object",
      "properties": {
        "SWML": {
          "description": "A SWML object to be executed.",
          "$ref": "SWMLObject.json"
        }
      },
      "required": [
        "SWML"
      ],
      "additionalProperties": false
    },
    "ContextSwitchAction": {
      "type": "object",
      "properties": {
        "context_switch": {
          "type": "object",
          "properties": {
            "system_prompt": {
              "type": "string",
              "description": "The instructions to send to the agent. Default is not set."
            },
            "consolidate": {
              "type": "boolean",
              "description": "Whether to consolidate the context. Default is `false`."
            },
            "user_prompt": {
              "type": "string",
              "description": "A string serving as simulated user input for the AI Agent.\nDuring a context_switch in the AI's prompt, the user_prompt offers the AI pre-established context or guidance.\nDefault is not set"
            }
          },
          "required": [
            "system_prompt"
          ],
          "description": "A JSON object containing the context to switch to. Default is not set.",
          "additionalProperties": false
        }
      },
      "required": [
        "context_switch"
      ],
      "additionalProperties": false
    },
    "PlaybackBGAction": {
      "type": "object",
      "properties": {
        "playback_bg": {
          "type": "object",
          "properties": {
            "file": {
              "type": "string",
              "format": "uri",
              "description": "URL or filepath of the audio file to play."
            },
            "wait": {
              "type": "boolean",
              "description": "Whether to wait for the audio file to finish playing before continuing. Default is `false`."
            }
          },
          "required": [
            "file"
          ],
          "description": "A JSON object containing the audio file to play.",
          "additionalProperties": false
        }
      },
      "required": [
        "playback_bg"
      ],
      "additionalProperties": false
    },
    "SayAction": {
      "type": "object",
      "properties": {
        "say": {
          "type": "string",
          "description": "A message to be spoken by the AI agent."
        }
      },
      "required": [
        "say"
      ],
      "additionalProperties": false
    },
    "SetGlobalDataAction": {
      "type": "object",
      "properties": {
        "set_global_data": {
          "type": "object",
          "properties": {},
          "additionalProperties": {},
          "description": "A JSON object containing any global data, as a key-value map. This action sets the data in the `global_meta_data` to be globally referenced."
        }
      },
      "required": [
        "set_global_data"
      ],
      "additionalProperties": false
    },
    "SetMetaDataAction": {
      "type": "object",
      "properties": {
        "set_meta_data": {
          "type": "object",
          "properties": {},
          "additionalProperties": {},
          "description": "A JSON object containing any metadata, as a key-value map. This action sets the data in the `meta_data` to be referenced locally in the function."
        }
      },
      "required": [
        "set_meta_data"
      ],
      "additionalProperties": false
    },
    "StopAction": {
      "type": "object",
      "properties": {
        "stop": {
          "type": "boolean",
          "description": "Whether to stop the conversation."
        }
      },
      "required": [
        "stop"
      ],
      "additionalProperties": false
    },
    "StopPlaybackBGAction": {
      "type": "object",
      "properties": {
        "stop_playback_bg": {
          "type": "boolean",
          "description": "Whether to stop the background audio file."
        }
      },
      "required": [
        "stop_playback_bg"
      ],
      "additionalProperties": false
    },
    "ToggleFunctionsAction": {
      "type": "object",
      "properties": {
        "toggle_functions": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "active": {
                "type": "boolean",
                "description": "Whether to activate or deactivate the functions. Default is `true`"
              },
              "function": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                ],
                "description": "The function names to toggle."
              }
            },
            "required": [
              "active",
              "function"
            ],
            "additionalProperties": false
          },
          "description": "Whether to toggle the functions on or off."
        }
      },
      "required": [
        "toggle_functions"
      ],
      "additionalProperties": false
    },
    "UnsetGlobalDataAction": {
      "type": "object",
      "properties": {
        "unset_global_data": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "object",
              "properties": {},
              "additionalProperties": false
            }
          ],
          "description": "The key of the global data to unset from the `global_meta_data`. You can also reset the `global_meta_data` by passing in a new object."
        }
      },
      "required": [
        "unset_global_data"
      ],
      "additionalProperties": false
    },
    "UnsetMetaDataAction": {
      "type": "object",
      "properties": {
        "unset_meta_data": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "object",
              "properties": {},
              "additionalProperties": false
            }
          ],
          "description": "The key of the local data to unset from the `meta_data`. You can also reset the `meta_data` by passing in a new object."
        }
      },
      "required": [
        "unset_meta_data"
      ],
      "additionalProperties": false
    },
    "UserInputAction": {
      "type": "object",
      "properties": {
        "user_input": {
          "type": "string",
          "description": "Used to inject text into the users queue as if they input the data themselves."
        }
      },
      "required": [
        "user_input"
      ],
      "additionalProperties": false
    }
  },
  "additionalProperties": false
}